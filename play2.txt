here are my models so you can use them as context to shape the solution to match my project. from django.contrib.auth.models import Abstracthis is from accounts.models User from django.db import models  tfrom django.contrib.auth.models import AbstractUser, Group, Permission import uuid   class User(AbstractUser):     id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)     USER_TYPES = (         ("seller", "Seller"),         ("customer", "Customer"),     )     user_type = models.CharField(max_length=10, default="customer", choices=USER_TYPES)     email = models.EmailField(unique=True)     groups = models.ManyToManyField(         Group, related_name="custom_user_groups", blank=True     )     user_permissions = models.ManyToManyField(         Permission, related_name="custom_user_permissions", blank=True     )      username = models.CharField(max_length=150, unique=True, blank=True, null=True)     full_name = models.CharField(max_length=255)     phone_number = models.CharField(max_length=20, blank=True, null=True)  # Optional     last_access = models.DateTimeField(auto_now=True)     is_email_verified = models.BooleanField(default=False)     address = models.TextField(blank=True, null=True)     preferred_language = models.CharField(max_length=10, default="en")     created_at = models.DateTimeField(auto_now_add=True)     updated_at = models.DateTimeField(auto_now=True)     USERNAME_FIELD = "email"     REQUIRED_FIELDS = ["username"]      class Meta:         ordering = ["-created_at"]  # newest first      def __str__(self):         return self.email , this is from orders.models from django.db import models from stores.models import Store from products.models import Product from django.contrib.auth import get_user_model  User = get_user_model()   class Cart(models.Model):     user = models.ForeignKey(User, on_delete=models.CASCADE)     store = models.ForeignKey(Store, on_delete=models.CASCADE)     status = models.CharField(max_length=20, default="active")   class CartItem(models.Model):     cart = models.ForeignKey(         Cart, on_delete=models.CASCADE, null=True, related_name="cart_items"     )  # âœ… Un-commented this line     product = models.ForeignKey(Product, on_delete=models.CASCADE, null=True)     quantity = models.PositiveIntegerField(default=1)   class Order(models.Model):     cart = models.ForeignKey(Cart, on_delete=models.CASCADE, null=True)     user = models.ForeignKey(User, on_delete=models.CASCADE)     store = models.ForeignKey(Store, on_delete=models.CASCADE, null=True)     total_price = models.DecimalField(max_digits=10, decimal_places=2)     status = models.CharField(         max_length=20, choices=[("pending", "Pending"), ("completed", "Completed")]     )     payment_method = models.CharField(max_length=200, blank=True, null=True)     created_at = models.DateTimeField(auto_now_add=True)     shipping_address = models.CharField(max_length=300, null=True, blank=True) this is from products.models from django.db import models from stores.models import Store from cloudinary.models import CloudinaryField   class Category(models.Model):     store = models.ForeignKey(         Store, on_delete=models.CASCADE, related_name="categories"     )     name = models.CharField(max_length=255)     created_at = models.DateTimeField(auto_now_add=True)      def __str__(self):         return f"{self.name} - {self.store.name}"   class Image(models.Model):     image = CloudinaryField("products/images", null=True)     created_at = models.DateTimeField(auto_now_add=True)      def __str__(self):         return f"{self.image}"   class Product(models.Model):     store = models.ForeignKey(Store, on_delete=models.CASCADE, related_name="products")     category = models.ForeignKey(         Category,         on_delete=models.SET_NULL,         null=True,         blank=True,         related_name="products",     )     # sku = models.CharField(max_length=255, default="")     selling_type = models.CharField(max_length=20, default="")     images = models.ManyToManyField(Image, related_name="products", blank=True)     weight = models.DecimalField(max_digits=10, decimal_places=2, default=0)     dimensions = models.CharField(max_length=255, default="0x0x0")      name = models.CharField(max_length=255)     description = models.TextField(blank=True, default="")     price = models.DecimalField(max_digits=10, decimal_places=2)     stock = models.PositiveIntegerField(default=0)     rating = models.DecimalField(max_digits=2, default=0, decimal_places=1)     created_at = models.DateTimeField(auto_now_add=True)      def __str__(self):         return f"{self.name} - {self.price} - {self.store.name}"  this is from stores.models from django.db import models from django.contrib.auth import get_user_model import uuid from cloudinary.models import CloudinaryField  User = get_user_model()   class Store(models.Model):     id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)     owner = models.ForeignKey(         User, on_delete=models.CASCADE, related_name="owned_stores"     )     name = models.CharField(max_length=255)     # slug = models.SlugField(unique=True)     # description = models.TextField(blank=True, null=True)     hero_name = models.CharField(max_length=255, null=True, blank=True)     hero_description = models.TextField(blank=True, null=True)     hero_image = CloudinaryField("stores/images", null=True)     template = models.CharField(max_length=255)     created_at = models.DateTimeField(auto_now_add=True)     customers = models.ManyToManyField(         User, related_name="stores", null=True, blank=True     )      def __str__(self):         return f"{self.name} - {self.owner.email}" this is from seller_dashboard.models from django.db import models from django.contrib.auth import get_user_model import uuid  User = get_user_model()   class Dashboard(models.Model):     owner = models.ForeignKey(         User, on_delete=models.CASCADE, related_name="owned_dashboards"     )     total_revenue = models.DecimalField(max_digits=10, decimal_places=2, default=0)     total_orders = models.PositiveIntegerField(default=0)     new_customers = models.PositiveIntegerField(default=0)      def __str__(self):         return self.owner.email   now regenerate the solution. note that adding products should go like this NAME | CATEGORY etc