4. API Structure (Example Endpoints)
User Authentication
âœ… POST /api/users/register/ â€“ Register a new user.
âœ… POST /api/users/login/ â€“ Authenticate user.

Store Management
âœ… GET /api/stores/ â€“ Get all stores.
âœ… POST /api/stores/ â€“ Create a new store.

Products & Categories
âœ… GET /api/products/?store=<store_id> â€“ Get products by store.
âœ… POST /api/products/ â€“ Add new product.

Cart & Orders
âœ… POST /api/cart/add/ â€“ Add product to cart.
âœ… POST /api/orders/create/ â€“ Place an order.

Payments
âœ… POST /api/payments/process/ â€“ Process payment.



4. Cart & Orders (Orders App)
Allows customers to add products to their cart, place orders, and track them.

âœ… Add a product to cart
POST /api/cart/add/
ðŸ“Œ Request:
get's cart that belongs to request.user and  is having status=active
{
    "product_id": 1,
    "quantity": 2
}
ðŸ“Œ Response:

{
    "message": "Product added to cart!"
}

âœ… View cart items
GET /api/cart/?store_id={store_id}
ðŸ“Œ Response:


[
    {
        "product_name": "Leather Jacket",
        "quantity": 2,
        "price": 79.99
    },
    {
        "product"_name: "Leather Jacket 2",
        "quantity": 3,
        "price": 67.99
    }
]
âœ… Place an order
POST /api/orders/create/
ðŸ“Œ Request:
once the cart is added to an order, it's status is changed to inactive and a new cart is created for that user 
{
    "cart_id": 1,
    "payment_method": "credit_card",
    "shipping_address": "no 1 lessel dadadada, USA"
}
ðŸ“Œ Response:


{
    "message": "Order placed successfully!",
    "order_id": 1001
}
âœ… Get order details
GET /api/orders/{order_id}/
ðŸ“Œ Response:


{
    "id": 1001,
    "status": "Processing",
    "items": [
        {
            "product": "Leather Jacket",
            "quantity": 2,
            "price": 79.99
        }
    ]
}
